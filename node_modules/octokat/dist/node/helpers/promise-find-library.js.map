{"version":3,"sources":["../../../src/helpers/promise-find-library.js"],"names":["window","Q","newPromise","deferred","defer","resolve","val","reject","err","fn","promise","allPromises","all","promises","angular","injector","invoke","$q","jQuery","Deferred","when","then"],"mappings":";;;;;;;;AAAA,IAAI,OAAOA,MAAP,KAAkB,WAAlB,IAAiCA,WAAW,IAAhD,EAAsD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,OAAOC,CAAX,EAAc;AACZ,QAAIC,aAAa,wBAAM;AACrB,UAAIC,WAAWH,OAAOC,CAAP,CAASG,KAAT,EAAf;AACA,UAAIC,UAAU,SAAVA,OAAU;AAAA,eAAOF,SAASE,OAAT,CAAiBC,GAAjB,CAAP;AAAA,OAAd;AACA,UAAIC,SAAS,SAATA,MAAS;AAAA,eAAOJ,SAASI,MAAT,CAAgBC,GAAhB,CAAP;AAAA,OAAb;AACAC,SAAGJ,OAAH,EAAYE,MAAZ;AACA,aAAOJ,SAASO,OAAhB;AACD,KAND;AAOA,QAAIC,cAAc;AAAA,aAAYX,OAAOC,CAAP,CAASW,GAAT,CAAaC,QAAb,CAAZ;AAAA,KAAlB;AACD,GATD,MASO,IAAIb,OAAOc,OAAX,EAAoB;AACzB,QAAIZ,aAAa,IAAjB;AACA,QAAIS,cAAc,IAAlB;;AAEA;AACA,QAAII,WAAWD,QAAQC,QAAR,CAAiB,CAAC,IAAD,CAAjB,CAAf;AACAA,aAASC,MAAT,CAAgB,UAAUC,EAAV,EAAc;AAC5B,cA4BGf,UA5BH,gBAAa,oBAAUO,EAAV,EAAc;AACzB,YAAIN,WAAWc,GAAGb,KAAH,EAAf;AACA,YAAIC,UAAU,SAAVA,OAAU;AAAA,iBAAOF,SAASE,OAAT,CAAiBC,GAAjB,CAAP;AAAA,SAAd;AACA,YAAIC,SAAS,SAATA,MAAS;AAAA,iBAAOJ,SAASI,MAAT,CAAgBC,GAAhB,CAAP;AAAA,SAAb;AACAC,WAAGJ,OAAH,EAAYE,MAAZ;AACA,eAAOJ,SAASO,OAAhB;AACD,OAND;AAOA,qBAqBeC,WArBf,GAAOA,cAAc;AAAA,eAAYM,GAAGL,GAAH,CAAOC,QAAP,CAAZ;AAAA,OAArB;AACD,KATD;AAUD,GAhBM,MAgBA,IAAIb,OAAOkB,MAAP,IAAiBlB,OAAOkB,MAAP,CAAcC,QAAnC,EAA6C;AAClD,QAAIjB,aAAa,wBAAM;AACrB,UAAIQ,UAAUV,OAAOkB,MAAP,CAAcC,QAAd,EAAd;AACA,UAAId,UAAU,SAAVA,OAAU;AAAA,eAAOK,QAAQL,OAAR,CAAgBC,GAAhB,CAAP;AAAA,OAAd;AACA,UAAIC,SAAS,SAATA,MAAS;AAAA,eAAOG,QAAQH,MAAR,CAAeD,GAAf,CAAP;AAAA,OAAb;AACAG,SAAGJ,OAAH,EAAYE,MAAZ;AACA,aAAOG,QAAQA,OAAR,EAAP;AACD,KAND;AAOA,QAAIC,cAAc,+BAAY;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAO,yBAAOO,MAAP,EAAcE,IAAd,0CAAsBP,QAAtB,GAAgCQ,IAAhC,CAAqC;AAAA,0CAAIR,QAAJ;AAAIA,kBAAJ;AAAA;;AAAA,eAAiBA,QAAjB;AAAA,OAArC,CAAP;AACD,KAPD;AAQD;AACF;;QAEQX,U,GAAAA,U;QAAYS,W,GAAAA,W","file":"promise-find-library.js","sourcesContent":["if (typeof window !== 'undefined' && window !== null) {\n  // Running in a browser\n\n  // Determine the correct Promise factory.\n  // Try to use libraries before native Promises since most Promise users\n  // are already using a library.\n  //\n  // Try in the following order:\n  // - Q Promise\n  // - angularjs Promise\n  // - jQuery Promise\n  // - native Promise or a polyfill\n  if (window.Q) {\n    var newPromise = fn => {\n      let deferred = window.Q.defer()\n      let resolve = val => deferred.resolve(val)\n      let reject = err => deferred.reject(err)\n      fn(resolve, reject)\n      return deferred.promise\n    }\n    var allPromises = promises => window.Q.all(promises)\n  } else if (window.angular) {\n    var newPromise = null\n    var allPromises = null\n\n    // Details on Angular Promises: http://docs.angularjs.org/api/ng/service/$q\n    let injector = angular.injector(['ng'])\n    injector.invoke(function ($q) {\n      newPromise = function (fn) {\n        let deferred = $q.defer()\n        let resolve = val => deferred.resolve(val)\n        let reject = err => deferred.reject(err)\n        fn(resolve, reject)\n        return deferred.promise\n      }\n      return allPromises = promises => $q.all(promises)\n    })\n  } else if (window.jQuery && window.jQuery.Deferred) {\n    var newPromise = fn => {\n      let promise = window.jQuery.Deferred()\n      let resolve = val => promise.resolve(val)\n      let reject = val => promise.reject(val)\n      fn(resolve, reject)\n      return promise.promise()\n    }\n    var allPromises = promises => {\n      // `jQuery.when` is a little odd.\n      // - It accepts each promise as an argument (instead of an array of promises)\n      // - Each resolved value is an argument (instead of an array of values)\n      //\n      // So, convert the array of promises to args and then the resolved args to an array\n      return window.jQuery.when(...promises).then((...promises) => promises)\n    }\n  }\n}\n\nexport { newPromise, allPromises }\n"]}
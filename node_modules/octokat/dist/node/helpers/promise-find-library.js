'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

if (typeof window !== 'undefined' && window !== null) {
  // Running in a browser

  // Determine the correct Promise factory.
  // Try to use libraries before native Promises since most Promise users
  // are already using a library.
  //
  // Try in the following order:
  // - Q Promise
  // - angularjs Promise
  // - jQuery Promise
  // - native Promise or a polyfill
  if (window.Q) {
    var newPromise = function newPromise(fn) {
      var deferred = window.Q.defer();
      var resolve = function resolve(val) {
        return deferred.resolve(val);
      };
      var reject = function reject(err) {
        return deferred.reject(err);
      };
      fn(resolve, reject);
      return deferred.promise;
    };
    var allPromises = function allPromises(promises) {
      return window.Q.all(promises);
    };
  } else if (window.angular) {
    var newPromise = null;
    var allPromises = null;

    // Details on Angular Promises: http://docs.angularjs.org/api/ng/service/$q
    var injector = angular.injector(['ng']);
    injector.invoke(function ($q) {
      exports.newPromise = newPromise = function newPromise(fn) {
        var deferred = $q.defer();
        var resolve = function resolve(val) {
          return deferred.resolve(val);
        };
        var reject = function reject(err) {
          return deferred.reject(err);
        };
        fn(resolve, reject);
        return deferred.promise;
      };
      return exports.allPromises = allPromises = function allPromises(promises) {
        return $q.all(promises);
      };
    });
  } else if (window.jQuery && window.jQuery.Deferred) {
    var newPromise = function newPromise(fn) {
      var promise = window.jQuery.Deferred();
      var resolve = function resolve(val) {
        return promise.resolve(val);
      };
      var reject = function reject(val) {
        return promise.reject(val);
      };
      fn(resolve, reject);
      return promise.promise();
    };
    var allPromises = function allPromises(promises) {
      var _window$jQuery;

      // `jQuery.when` is a little odd.
      // - It accepts each promise as an argument (instead of an array of promises)
      // - Each resolved value is an argument (instead of an array of values)
      //
      // So, convert the array of promises to args and then the resolved args to an array
      return (_window$jQuery = window.jQuery).when.apply(_window$jQuery, _toConsumableArray(promises)).then(function () {
        for (var _len = arguments.length, promises = Array(_len), _key = 0; _key < _len; _key++) {
          promises[_key] = arguments[_key];
        }

        return promises;
      });
    };
  }
}

exports.newPromise = newPromise;
exports.allPromises = allPromises;
//# sourceMappingURL=promise-find-library.js.map